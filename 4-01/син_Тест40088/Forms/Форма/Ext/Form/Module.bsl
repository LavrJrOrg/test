
&НаСервере
Процедура ТестНаСервере()
	
	//ТаблицаРезультатовКРазбору = ТаблицаДанныхРезультатовЭкзамена();
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	син_РезультатыПрохожденияПредсменногоЭкзаменатораЭСМО.ИдентификаторСообщения КАК ИдентификаторСообщения
	//	|ПОМЕСТИТЬ ВТ_ИдентификаторыРезультатовЭкзаменатора
	//	|ИЗ
	//	|	РегистрСведений.син_РезультатыПрохожденияПредсменногоЭкзаменатораЭСМО КАК син_РезультатыПрохожденияПредсменногоЭкзаменатораЭСМО
	//	|
	//	|ИНДЕКСИРОВАТЬ ПО
	//	|	ИдентификаторСообщения
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ ПЕРВЫЕ 10
	//	|	энтр_ОчередьВходящихСообщений.ИдентификаторСообщения КАК ИдентификаторСообщения,
	//	|	энтр_ОчередьВходящихСообщений.Сообщение КАК Сообщение,
	//	|	энтр_ОчередьВходящихСообщений.ДатаРегистрации КАК ДатаРегистрации
	//	|ИЗ
	//	|	РегистрСведений.энтр_ОчередьВходящихСообщений КАК энтр_ОчередьВходящихСообщений
	//	|		Левое СОЕДИНЕНИЕ ВТ_ИдентификаторыРезультатовЭкзаменатора КАК ВТ_ИдентификаторыРезультатовЭкзаменатора
	//	|		ПО энтр_ОчередьВходящихСообщений.ИдентификаторСообщения = ВТ_ИдентификаторыРезультатовЭкзаменатора.ИдентификаторСообщения
	//	|ГДЕ
	//	|	энтр_ОчередьВходящихСообщений.Обработано = ЛОЖЬ
	//	|	И энтр_ОчередьВходящихСообщений.ФорматКонвертации = ЗНАЧЕНИЕ(Перечисление.энтр_ФорматыКонвертации.КонтрольЗнаний)
	//	|	И ВТ_ИдентификаторыРезультатовЭкзаменатора.ИдентификаторСообщения ЕСТЬ NULL";  
	//
	//	//"ВЫБРАТЬ ПЕРВЫЕ 1
	//	//|	энтр_ОчередьВходящихСообщений.ИдентификаторСообщения КАК ИдентификаторСообщения,
	//	//|	энтр_ОчередьВходящихСообщений.Сообщение КАК Сообщение,
	//	//|	энтр_ОчередьВходящихСообщений.ДатаРегистрации КАК ДатаРегистрации
	//	//|ИЗ
	//	//|	РегистрСведений.энтр_ОчередьВходящихСообщений КАК энтр_ОчередьВходящихСообщений
	//	//|ГДЕ
	//	//|	энтр_ОчередьВходящихСообщений.Обработано = ЛОЖЬ
	//	//|	И энтр_ОчередьВходящихСообщений.ФорматКонвертации = ЗНАЧЕНИЕ(Перечисление.энтр_ФорматыКонвертации.КонтрольЗнаний)
	//	//|	И энтр_ОчередьВходящихСообщений.ИдентификаторСообщения = &Идент";
	//
	//Запрос.УстановитьПараметр("Идент", Новый УникальныйИдентификатор(объект.Идентификатор));
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	
	//	ЧтениеJSON = Новый ЧтениеJSON;
	//	ЧтениеJSON.УстановитьСтроку(ВыборкаДетальныеЗаписи.Сообщение);
	//	
	//	СодержимоеСообщения = ПрочитатьJSON(ЧтениеJSON);
	//	
	//	Для каждого ОтветНаВопрос Из СодержимоеСообщения Цикл
	//			
	//			СтрокаРезультатовКРазбору = ТаблицаРезультатовКРазбору.Добавить();
	//			
	//			ЗаполнитьЗначенияСвойств(СтрокаРезультатовКРазбору, ОтветНаВопрос); 
	//			СтрокаРезультатовКРазбору.question_result_text = ?(ОтветНаВопрос.question_result_text = "Правильно", Истина, Ложь);
	//			СтрокаРезультатовКРазбору.org_name_string = ОтветНаВопрос.org_name;
	//			СтрокаРезультатовКРазбору.personal_name_string = ОтветНаВопрос.personal_name;
	//			СтрокаРезультатовКРазбору.otdel_name_string = ОтветНаВопрос.otdel_name;
	//			СтрокаРезультатовКРазбору.work_name_string = ОтветНаВопрос.work_name; 
	//			СтрокаРезультатовКРазбору.ДатаРегистрации = ВыборкаДетальныеЗаписи.ДатаРегистрации;
	//			СтрокаРезультатовКРазбору.ИдентификаторСообщения = ВыборкаДетальныеЗаписи.ИдентификаторСообщения; 
	//			СтрокаРезультатовКРазбору.time = СтроковыеФункцииКлиентСервер.СтрокаВДату(ОтветНаВопрос.time);
	//			
	//	КонецЦикла;	
	//	
	//	энтр_ОчередьВходящихСообщенийПроставитьОтметкуОбработано(ВыборкаДетальныеЗаписи.ИдентификаторСообщения);
	//	
	//КонецЦикла;   
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ТаблицаКДополнению.personal_uid КАК personal_uid,
	//	|	ТаблицаКДополнению.ИдентификаторСообщения КАК ИдентификаторСообщения,
	//	|	ТаблицаКДополнению.quiz_session_id КАК quiz_session_id,
	//	|	ТаблицаКДополнению.time КАК time,
	//	|	ТаблицаКДополнению.section_name КАК section_name,
	//	|	ТаблицаКДополнению.question_id КАК question_id,
	//	|	ТаблицаКДополнению.question_text КАК question_text,
	//	|	ТаблицаКДополнению.question_result КАК question_result,
	//	|	ТаблицаКДополнению.question_result_text КАК question_result_text,
	//	|	ТаблицаКДополнению.personal_name КАК personal_name,
	//	|	ТаблицаКДополнению.org_name КАК org_name,
	//	|	ТаблицаКДополнению.otdel_name КАК otdel_name,
	//	|	ТаблицаКДополнению.work_name КАК work_name,
	//	|	ТаблицаКДополнению.Шахта КАК Шахта,
	//	|	ТаблицаКДополнению.ДатаРегистрации КАК ДатаРегистрации
	//	|ПОМЕСТИТЬ ВТ_РезультатыЭкзаменаБезСсылок
	//	|ИЗ
	//	|	&ТаблицаКДополнению КАК ТаблицаКДополнению
	//	|
	//	|ИНДЕКСИРОВАТЬ ПО
	//	|	personal_uid
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ЕСТЬNULL(Сотрудники.Ссылка, ЗНАЧЕНИЕ(Справочник.Сотрудники.)) КАК personal_name,
	//	|	ЕСТЬNULL(Сотрудники.Должность, ЗНАЧЕНИЕ(Справочник.Должности.)) КАК work_name,
	//	|	ЕСТЬNULL(Сотрудники.Организация, ЗНАЧЕНИЕ(Справочник.Организации.)) КАК org_name,
	//	|	ЕСТЬNULL(Сотрудники.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.)) КАК otdel_name,
	//	|	ВТ_РезультатыЭкзаменаБезСсылок.personal_uid КАК personal_uid,
	//	|	ВТ_РезультатыЭкзаменаБезСсылок.ИдентификаторСообщения КАК ИдентификаторСообщения,
	//	|	ВТ_РезультатыЭкзаменаБезСсылок.quiz_session_id КАК quiz_session_id,
	//	|	ВТ_РезультатыЭкзаменаБезСсылок.time КАК time,
	//	|	ВТ_РезультатыЭкзаменаБезСсылок.section_name КАК section_name,
	//	|	ВТ_РезультатыЭкзаменаБезСсылок.question_id КАК question_id,
	//	|	ВТ_РезультатыЭкзаменаБезСсылок.question_text КАК question_text,
	//	|	ВТ_РезультатыЭкзаменаБезСсылок.question_result КАК question_result,
	//	|	ВТ_РезультатыЭкзаменаБезСсылок.question_result_text КАК question_result_text,
	//	|	ВТ_РезультатыЭкзаменаБезСсылок.Шахта КАК Шахта,
	//	|	ВТ_РезультатыЭкзаменаБезСсылок.ДатаРегистрации КАК ДатаРегистрации
	//	|ПОМЕСТИТЬ ВТ_БезТекущегоМестаРаботы
	//	|ИЗ
	//	|	ВТ_РезультатыЭкзаменаБезСсылок КАК ВТ_РезультатыЭкзаменаБезСсылок
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	//	|		ПО ВТ_РезультатыЭкзаменаБезСсылок.personal_uid = Сотрудники.Код
	//	|
	//	|ИНДЕКСИРОВАТЬ ПО
	//	|	personal_name,
	//	|	org_name
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	|	КадроваяИсторияСотрудников_ТекущееСостояние.Сотрудник КАК Сотрудник,
	//	|	КадроваяИсторияСотрудников_ТекущееСостояние.Организация КАК Организация,
	//	|	ВЫБОР
	//	|		КОГДА ИспользоватьШтатноеРасписание.Значение
	//	|			ТОГДА КадроваяИсторияСотрудников_ТекущееСостояние.ДолжностьПоШтатномуРасписанию.ДолжностьПрофессия
	//	|		ИНАЧЕ КадроваяИсторияСотрудников_ТекущееСостояние.ДолжностьПрофессия
	//	|	КОНЕЦ КАК Должность,
	//	|	КадроваяИсторияСотрудников_ТекущееСостояние.Подразделение КАК Подразделение
	//	|ПОМЕСТИТЬ ВТ_МестаРаботы
	//	|ИЗ
	//	|	РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних(
	//	|			&Дата,
	//	|			(Сотрудник, Организация) В
	//	|				(ВЫБРАТЬ
	//	|					ВТ_БезТекущегоМестаРаботы.personal_name,
	//	|					ВТ_БезТекущегоМестаРаботы.org_name
	//	|				ИЗ
	//	|					ВТ_БезТекущегоМестаРаботы КАК ВТ_БезТекущегоМестаРаботы)) КАК КадроваяИсторияСотрудников_ТекущееСостояние
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних(&Дата, Статус = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботника.Принят)) КАК КадроваяИсторияСотрудников_ПринятНаРаботу
	//	|		ПО КадроваяИсторияСотрудников_ТекущееСостояние.Сотрудник = КадроваяИсторияСотрудников_ПринятНаРаботу.Сотрудник
	//	|			И КадроваяИсторияСотрудников_ТекущееСостояние.Организация = КадроваяИсторияСотрудников_ПринятНаРаботу.Организация,
	//	|	Константа.ИспользоватьШтатноеРасписание КАК ИспользоватьШтатноеРасписание
	//	|
	//	|ИНДЕКСИРОВАТЬ ПО
	//	|	Сотрудник,
	//	|	Организация
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ЕСТЬNULL(ВТ_МестаРаботы.Сотрудник, ЗНАЧЕНИЕ(Справочник.Сотрудники.)) КАК personal_name,
	//	|	ЕСТЬNULL(ВТ_МестаРаботы.Должность, ЗНАЧЕНИЕ(Справочник.Должности.)) КАК work_name,
	//	|	ЕСТЬNULL(ВТ_МестаРаботы.Организация, ЗНАЧЕНИЕ(Справочник.Организации.)) КАК org_name,
	//	|	ЕСТЬNULL(ВТ_МестаРаботы.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.)) КАК otdel_name,
	//	|	ВТ_БезТекущегоМестаРаботы.personal_uid КАК personal_uid,
	//	|	ВТ_БезТекущегоМестаРаботы.ИдентификаторСообщения КАК ИдентификаторСообщения,
	//	|	ВТ_БезТекущегоМестаРаботы.quiz_session_id КАК quiz_session_id,
	//	|	ВТ_БезТекущегоМестаРаботы.time КАК time,
	//	|	ВТ_БезТекущегоМестаРаботы.section_name КАК section_name,
	//	|	ВТ_БезТекущегоМестаРаботы.question_id КАК question_id,
	//	|	ВТ_БезТекущегоМестаРаботы.question_text КАК question_text,
	//	|	ВТ_БезТекущегоМестаРаботы.question_result КАК question_result,
	//	|	ВТ_БезТекущегоМестаРаботы.question_result_text КАК question_result_text,
	//	|	ВТ_БезТекущегоМестаРаботы.Шахта КАК Шахта,
	//	|	ВТ_БезТекущегоМестаРаботы.ДатаРегистрации КАК ДатаРегистрации
	//	|ПОМЕСТИТЬ ВТ_БезШахты
	//	|ИЗ
	//	|	ВТ_БезТекущегоМестаРаботы КАК ВТ_БезТекущегоМестаРаботы
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МестаРаботы КАК ВТ_МестаРаботы
	//	|		ПО ВТ_БезТекущегоМестаРаботы.personal_name = ВТ_МестаРаботы.Сотрудник
	//	|			И ВТ_БезТекущегоМестаРаботы.org_name = ВТ_МестаРаботы.Организация
	//	|
	//	|ИНДЕКСИРОВАТЬ ПО
	//	|	otdel_name
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ВТ_БезШахты.personal_name КАК personal_name,
	//	|	ВТ_БезШахты.work_name КАК work_name,
	//	|	ВТ_БезШахты.org_name КАК org_name,
	//	|	ВТ_БезШахты.otdel_name КАК otdel_name,
	//	|	ВТ_БезШахты.personal_uid КАК personal_uid,
	//	|	ВТ_БезШахты.ИдентификаторСообщения КАК ИдентификаторСообщения,
	//	|	ВТ_БезШахты.quiz_session_id КАК quiz_session_id,
	//	|	ВТ_БезШахты.time КАК time,
	//	|	ВТ_БезШахты.section_name КАК section_name,
	//	|	ВТ_БезШахты.question_id КАК question_id,
	//	|	ВТ_БезШахты.question_text КАК question_text,
	//	|	ВТ_БезШахты.question_result КАК question_result,
	//	|	ВТ_БезШахты.question_result_text КАК question_result_text,
	//	|	ЕСТЬNULL(ВЫБОР
	//	|			КОГДА ПодразделенияОрганизаций.Родитель.Родитель = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	//	|				ТОГДА ПодразделенияОрганизаций.Ссылка
	//	|			ИНАЧЕ ВЫБОР
	//	|					КОГДА ПодразделенияОрганизаций.Родитель.Родитель.Родитель = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	//	|						ТОГДА ПодразделенияОрганизаций.Родитель.Ссылка
	//	|					ИНАЧЕ ВЫБОР
	//	|							КОГДА ПодразделенияОрганизаций.Родитель.Родитель.Родитель.Родитель = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	//	|								ТОГДА ПодразделенияОрганизаций.Родитель.Родитель.Ссылка 
	//	|									ИНАЧЕ ВЫБОР
	//	|										КОГДА ПодразделенияОрганизаций.Родитель.Родитель.Родитель.Родитель.Родитель = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	//	|								ТОГДА ПодразделенияОрганизаций.Родитель.Родитель.Родитель.Ссылка
	//	|							КОНЕЦ
	//	|						КОНЕЦ
	//	|				КОНЕЦ
	//	|		КОНЕЦ, ВТ_БезШахты.Шахта) КАК Шахта,
	//	|	ВТ_БезШахты.ДатаРегистрации КАК ДатаРегистрации
	//	|ИЗ
	//	|	ВТ_БезШахты КАК ВТ_БезШахты
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	//	|		ПО ВТ_БезШахты.otdel_name = ПодразделенияОрганизаций.Ссылка"; 
	//
	//Запрос.УстановитьПараметр("ТаблицаКДополнению", ТаблицаРезультатовКРазбору);
	//Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//
	//ЗаписьРезультатовЭкзамена(ВыборкаДетальныеЗаписи); 
	
	син_РегламентныеЗаданияСервер.син_ПолучитьРезультатыПрохожденияПредсменногоЭкзаменатораЭСМО();

КонецПроцедуры

&НаСервере
Процедура ЗаписьРезультатовЭкзамена(ВыборкаДанныхКЗаписи)

	Пока ВыборкаДанныхКЗаписи.Следующий() Цикл

		Попытка
			
			НоваяЗапись = РегистрыСведений.син_РезультатыПрохожденияПредсменногоЭкзаменатораЭСМО.СоздатьМенеджерЗаписи();
			
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДанныхКЗаписи); 

			НоваяЗапись.Записать();
			
		Исключение 
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
		
			ЗаписьЖурналаРегистрации("Запись результатов прохождения предсменного экзамена",
				УровеньЖурналаРегистрации.Ошибка,,, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
				
		КонецПопытки;
		
	КонецЦикла;

КонецПроцедуры   

&НаСервере
Процедура энтр_ОчередьВходящихСообщенийПроставитьОтметкуОбработано(ИдентификаторЗаписи)

	ЗаписьОчереди = РегистрыСведений.энтр_ОчередьВходящихСообщений.СоздатьМенеджерЗаписи();
	ЗаписьОчереди.ИдентификаторСообщения = ИдентификаторЗаписи;
	
	ЗаписьОчереди.Прочитать();
	Если ЗаписьОчереди.Выбран() Тогда
		
		// ЗаписьОчереди.Обработано = Истина;
		// ЗаписьОчереди.ТекстОшибки = "Обработано, перенесено в регистр ""син_РезультатыПрохожденияПредсменногоЭкзаменатораЭСМО"".";
		// ЗаписьОчереди.Записать();
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ТаблицаДанныхРезультатовЭкзамена()
	
	ТипБулево = Новый ОписаниеТипов("Булево");
	ТипСотрудник = Новый ОписаниеТипов("СправочникСсылка.Сотрудники");
	ТипОрганизация = Новый ОписаниеТипов("СправочникСсылка.Организации");
	ТипПодразделение = Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"); 
	ТипДолжность = Новый ОписаниеТипов("СправочникСсылка.Должности"); 
	Данные    = Новый ТаблицаЗначений;
	Колонки   = Данные.Колонки;

	Колонки.Добавить("ИдентификаторСообщения", Новый ОписаниеТипов("УникальныйИдентификатор"));
	Колонки.Добавить("quiz_session_id", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	Колонки.Добавить("time", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Колонки.Добавить("section_name", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	Колонки.Добавить("question_id", ОбщегоНазначения.ОписаниеТипаЧисло(5));
	Колонки.Добавить("question_text", ОбщегоНазначения.ОписаниеТипаСтрока(1024));
	Колонки.Добавить("question_result", ОбщегоНазначения.ОписаниеТипаЧисло(1));
	Колонки.Добавить("question_result_text", ТипБулево);
	Колонки.Добавить("personal_uid", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	Колонки.Добавить("personal_name1", ТипСотрудник);
	Колонки.Добавить("personal_name_string", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	Колонки.Добавить("org_name", ТипОрганизация);
	Колонки.Добавить("org_name_string", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	Колонки.Добавить("otdel_name", ТипПодразделение);
	Колонки.Добавить("otdel_name_string", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	Колонки.Добавить("work_name", ТипДолжность);
	Колонки.Добавить("work_name_string", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	Колонки.Добавить("Шахта", ТипПодразделение);
	Колонки.Добавить("ДатаРегистрации", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	
	Возврат Данные

КонецФункции

&НаКлиенте
Процедура Тест(Команда)  
	
	ТестНаСервере(); 
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Выполнено!";
	Сообщение.Сообщить();

КонецПроцедуры


//////////////////////////////////////////
&НаСервере
Процедура ЗаписиНеПопавшиеНаСервере()
	
	ТаблицаРезультатовКРазбору = ТаблицаДанныхРезультатовЭкзамена();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		//"ВЫБРАТЬ РАЗЛИЧНЫЕ
		//|	син_РезультатыПрохожденияПредсменногоЭкзаменатораЭСМО.ИдентификаторСообщения КАК ИдентификаторСообщения
		//|ПОМЕСТИТЬ ВТ_ИдентификаторыРезультатовЭкзаменатора
		//|ИЗ
		//|	РегистрСведений.син_РезультатыПрохожденияПредсменногоЭкзаменатораЭСМО КАК син_РезультатыПрохожденияПредсменногоЭкзаменатораЭСМО
		//|
		//|ИНДЕКСИРОВАТЬ ПО
		//|	ИдентификаторСообщения
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ ПЕРВЫЕ 10
		//|	энтр_ОчередьВходящихСообщений.ИдентификаторСообщения КАК ИдентификаторСообщения,
		//|	энтр_ОчередьВходящихСообщений.Сообщение КАК Сообщение,
		//|	энтр_ОчередьВходящихСообщений.ДатаРегистрации КАК ДатаРегистрации
		//|ИЗ
		//|	РегистрСведений.энтр_ОчередьВходящихСообщений КАК энтр_ОчередьВходящихСообщений
		//|		Левое СОЕДИНЕНИЕ ВТ_ИдентификаторыРезультатовЭкзаменатора КАК ВТ_ИдентификаторыРезультатовЭкзаменатора
		//|		ПО энтр_ОчередьВходящихСообщений.ИдентификаторСообщения = ВТ_ИдентификаторыРезультатовЭкзаменатора.ИдентификаторСообщения
		//|ГДЕ
		//|	энтр_ОчередьВходящихСообщений.Обработано = ЛОЖЬ
		//|	И энтр_ОчередьВходящихСообщений.ФорматКонвертации = ЗНАЧЕНИЕ(Перечисление.энтр_ФорматыКонвертации.КонтрольЗнаний)
		//|	И ВТ_ИдентификаторыРезультатовЭкзаменатора.ИдентификаторСообщения ЕСТЬ NULL";  
	
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	энтр_ОчередьВходящихСообщений.ИдентификаторСообщения КАК ИдентификаторСообщения,
		|	энтр_ОчередьВходящихСообщений.Сообщение КАК Сообщение,
		|	энтр_ОчередьВходящихСообщений.ДатаРегистрации КАК ДатаРегистрации
		|ИЗ
		|	РегистрСведений.энтр_ОчередьВходящихСообщений КАК энтр_ОчередьВходящихСообщений
		|ГДЕ
		//|	энтр_ОчередьВходящихСообщений.Обработано = ЛОЖЬ
		|	энтр_ОчередьВходящихСообщений.ФорматКонвертации = ЗНАЧЕНИЕ(Перечисление.энтр_ФорматыКонвертации.КонтрольЗнаний)
		|	И энтр_ОчередьВходящихСообщений.ИдентификаторСообщения = &Идент";
	
	Запрос.УстановитьПараметр("Идент", Новый УникальныйИдентификатор(объект.Идентификатор));
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ВыборкаДетальныеЗаписи.Сообщение);
		
		СодержимоеСообщения = ПрочитатьJSON(ЧтениеJSON);
		
		Для каждого ОтветНаВопрос Из СодержимоеСообщения Цикл
				
				СтрокаРезультатовКРазбору = ТаблицаРезультатовКРазбору.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаРезультатовКРазбору, ОтветНаВопрос); 
				СтрокаРезультатовКРазбору.question_result_text = ?(ОтветНаВопрос.question_result_text = "Правильно", Истина, Ложь);
				СтрокаРезультатовКРазбору.org_name_string = ОтветНаВопрос.org_name;
				СтрокаРезультатовКРазбору.personal_name_string = ОтветНаВопрос.personal_name;
				СтрокаРезультатовКРазбору.otdel_name_string = ОтветНаВопрос.otdel_name;
				СтрокаРезультатовКРазбору.work_name_string = ОтветНаВопрос.work_name; 
				СтрокаРезультатовКРазбору.ДатаРегистрации = ВыборкаДетальныеЗаписи.ДатаРегистрации;
				СтрокаРезультатовКРазбору.ИдентификаторСообщения = ВыборкаДетальныеЗаписи.ИдентификаторСообщения; 
				СтрокаРезультатовКРазбору.time = СтроковыеФункцииКлиентСервер.СтрокаВДату(ОтветНаВопрос.time);
				
		КонецЦикла;	
		
		//энтр_ОчередьВходящихСообщенийПроставитьОтметкуОбработано(ВыборкаДетальныеЗаписи.ИдентификаторСообщения);
		
	КонецЦикла;   
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаКДополнению.quiz_session_id КАК quiz_session_id,
		|	1 КАК ВсегоЗаСессию
		|ПОМЕСТИТЬ ВТ_РезультатыЭкзаменаБезСсылок
		|ИЗ
		|	&ТаблицаКДополнению КАК ТаблицаКДополнению
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	quiz_session_id
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_РезультатыЭкзаменаБезСсылок.quiz_session_id КАК quiz_session_id,
		|	СУММА(ВТ_РезультатыЭкзаменаБезСсылок.ВсегоЗаСессию) КАК ВсегоЗаСессию
		//|ПОМЕСТИТЬ ВТ_РезультатыГрупп
		|ИЗ
		|	ВТ_РезультатыЭкзаменаБезСсылок КАК ВТ_РезультатыЭкзаменаБезСсылок
		|
		|Сгруппировать по
		|	quiz_session_id";
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ
		//|	ЕСТЬNULL(син_РезультатыПрохожденияПредсменногоЭкзаменатораЭСМО.quiz_session_id, """") КАК quiz_session_id1,
		//|	ВТ_РезультатыЭкзаменаБезСсылок.personal_uid КАК personal_uid,
		//|	ВТ_РезультатыЭкзаменаБезСсылок.ИдентификаторСообщения КАК ИдентификаторСообщения,
		//|	ВТ_РезультатыЭкзаменаБезСсылок.quiz_session_id КАК quiz_session_id,
		//|	ВТ_РезультатыЭкзаменаБезСсылок.time КАК time,
		//|	ВТ_РезультатыЭкзаменаБезСсылок.section_name КАК section_name,
		//|	ВТ_РезультатыЭкзаменаБезСсылок.question_id КАК question_id,
		//|	ВТ_РезультатыЭкзаменаБезСсылок.question_text КАК question_text,
		//|	ВТ_РезультатыЭкзаменаБезСсылок.question_result КАК question_result,
		//|	ВТ_РезультатыЭкзаменаБезСсылок.question_result_text КАК question_result_text,
		//|	ВТ_РезультатыЭкзаменаБезСсылок.Шахта КАК Шахта,
		//|	ВТ_РезультатыЭкзаменаБезСсылок.ДатаРегистрации КАК ДатаРегистрации
		//|ИЗ
		//|	ВТ_РезультатыЭкзаменаБезСсылок КАК ВТ_РезультатыЭкзаменаБезСсылок
		//|	Левое СОЕДИНЕНИЕ РегистрСведений.син_РезультатыПрохожденияПредсменногоЭкзаменатораЭСМО КАК син_РезультатыПрохожденияПредсменногоЭкзаменатораЭСМО
		//|		ПО ВТ_РезультатыЭкзаменаБезСсылок.quiz_session_id = син_РезультатыПрохожденияПредсменногоЭкзаменатораЭСМО.quiz_session_id  
		//|ГДЕ
		//|	син_РезультатыПрохожденияПредсменногоЭкзаменатораЭСМО.quiz_session_id is null
		//|";
	
	Запрос.УстановитьПараметр("ТаблицаКДополнению", ТаблицаРезультатовКРазбору);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

КонецПроцедуры

&НаКлиенте
Процедура ЗаписиНеПопавшие(Команда)
	ЗаписиНеПопавшиеНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДозаполнитьСотрудниковВРегистреНаСервере()

	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	син_РезультатыПрохожденияПредсменногоЭкзаменатораЭСМО.ИдентификаторСообщения КАК ИдентификаторСообщения,
		|	син_РезультатыПрохожденияПредсменногоЭкзаменатораЭСМО.personal_name КАК personal_name,
		|	син_РезультатыПрохожденияПредсменногоЭкзаменатораЭСМО.org_name КАК org_name,
		|	син_РезультатыПрохожденияПредсменногоЭкзаменатораЭСМО.otdel_name КАК otdel_name,
		|	син_РезультатыПрохожденияПредсменногоЭкзаменатораЭСМО.work_name КАК work_name,
		|	син_РезультатыПрохожденияПредсменногоЭкзаменатораЭСМО.Шахта КАК Шахта,
		|	син_РезультатыПрохожденияПредсменногоЭкзаменатораЭСМО.quiz_session_id КАК quiz_session_id,
		|	син_РезультатыПрохожденияПредсменногоЭкзаменатораЭСМО.question_id КАК question_id,
		|	син_РезультатыПрохожденияПредсменногоЭкзаменатораЭСМО.personal_uid КАК personal_uid,
		|	син_РезультатыПрохожденияПредсменногоЭкзаменатораЭСМО.Обработана КАК Обработана,
		|	син_РезультатыПрохожденияПредсменногоЭкзаменатораЭСМО.time КАК time,
		|	син_РезультатыПрохожденияПредсменногоЭкзаменатораЭСМО.section_name КАК section_name,
		|	син_РезультатыПрохожденияПредсменногоЭкзаменатораЭСМО.question_text КАК question_text,
		|	син_РезультатыПрохожденияПредсменногоЭкзаменатораЭСМО.question_result КАК question_result,
		|	син_РезультатыПрохожденияПредсменногоЭкзаменатораЭСМО.question_result_text КАК question_result_text,
		|	син_РезультатыПрохожденияПредсменногоЭкзаменатораЭСМО.ДатаРегистрации КАК ДатаРегистрации
		|ПОМЕСТИТЬ ВТ_НеЗаполненныйСотрудник
		|ИЗ
		|	РегистрСведений.син_РезультатыПрохожденияПредсменногоЭкзаменатораЭСМО КАК син_РезультатыПрохожденияПредсменногоЭкзаменатораЭСМО
		|ГДЕ
		|	син_РезультатыПрохожденияПредсменногоЭкзаменатораЭСМО.personal_name = &personal_name
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	personal_uid
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	ВТ_НеЗаполненныйСотрудник.personal_uid КАК personal_uid
		|ПОМЕСТИТЬ ВТ_Сотрудники
		|ИЗ
		|	ВТ_НеЗаполненныйСотрудник КАК ВТ_НеЗаполненныйСотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО ВТ_НеЗаполненныйСотрудник.personal_uid = Сотрудники.Код
		|ГДЕ
		|	Сотрудники.Ссылка <> &personal_name
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	personal_uid
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КадроваяИсторияСотрудников_ТекущееСостояние.Сотрудник КАК Сотрудник,
		|	КадроваяИсторияСотрудников_ТекущееСостояние.Сотрудник.Код КАК СотрудникКод,
		|	КадроваяИсторияСотрудников_ТекущееСостояние.Организация КАК Организация,
		|	ВЫБОР
		|		КОГДА ИспользоватьШтатноеРасписание.Значение
		|			ТОГДА КадроваяИсторияСотрудников_ТекущееСостояние.ДолжностьПоШтатномуРасписанию.ДолжностьПрофессия
		|		ИНАЧЕ КадроваяИсторияСотрудников_ТекущееСостояние.ДолжностьПрофессия
		|	КОНЕЦ КАК Должность,
		|	КадроваяИсторияСотрудников_ТекущееСостояние.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТ_МестаРаботы
		|ИЗ
		|	РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних(
		|			&Дата,
		|			Сотрудник В
		|				(ВЫБРАТЬ
		|					ВТ_Сотрудники.Сотрудник
		|				ИЗ
		|					ВТ_Сотрудники КАК ВТ_Сотрудники)) КАК КадроваяИсторияСотрудников_ТекущееСостояние
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних(&Дата, Статус = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботника.Принят)) КАК КадроваяИсторияСотрудников_ПринятНаРаботу
		|		ПО КадроваяИсторияСотрудников_ТекущееСостояние.Сотрудник = КадроваяИсторияСотрудников_ПринятНаРаботу.Сотрудник
		|			И КадроваяИсторияСотрудников_ТекущееСостояние.Организация = КадроваяИсторияСотрудников_ПринятНаРаботу.Организация,
		|	Константа.ИспользоватьШтатноеРасписание КАК ИспользоватьШтатноеРасписание
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВТ_МестаРаботы.Сотрудник, ЗНАЧЕНИЕ(Справочник.Сотрудники.)) КАК personal_name1,
		|	ВТ_НеЗаполненныйСотрудник.personal_name КАК personal_name,
		|	ЕСТЬNULL(ВТ_МестаРаботы.Должность, ЗНАЧЕНИЕ(Справочник.Должности.)) КАК work_name1,
		|	ВТ_НеЗаполненныйСотрудник.work_name КАК work_name,
		|	ЕСТЬNULL(ВТ_МестаРаботы.Организация, ЗНАЧЕНИЕ(Справочник.Организации.)) КАК org_name1,
		|	ВТ_НеЗаполненныйСотрудник.org_name КАК org_name,
		|	ЕСТЬNULL(ВТ_МестаРаботы.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.)) КАК otdel_name1,
		|	ВТ_НеЗаполненныйСотрудник.otdel_name КАК otdel_name,
		|	ВТ_НеЗаполненныйСотрудник.personal_uid КАК personal_uid,
		|	ВТ_НеЗаполненныйСотрудник.ИдентификаторСообщения КАК ИдентификаторСообщения,
		|	ВТ_НеЗаполненныйСотрудник.quiz_session_id КАК quiz_session_id,
		|	ВТ_НеЗаполненныйСотрудник.time КАК time,
		|	ВТ_НеЗаполненныйСотрудник.section_name КАК section_name,
		|	ВТ_НеЗаполненныйСотрудник.question_id КАК question_id,
		|	ВТ_НеЗаполненныйСотрудник.question_text КАК question_text,
		|	ВТ_НеЗаполненныйСотрудник.question_result КАК question_result,
		|	ВТ_НеЗаполненныйСотрудник.question_result_text КАК question_result_text,
		|	ВТ_НеЗаполненныйСотрудник.Шахта КАК Шахта,
		|	ВТ_НеЗаполненныйСотрудник.ДатаРегистрации КАК ДатаРегистрации
		|ПОМЕСТИТЬ ВТ_БезШахты
		|ИЗ
		|	ВТ_НеЗаполненныйСотрудник КАК ВТ_НеЗаполненныйСотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МестаРаботы КАК ВТ_МестаРаботы
		|		ПО ВТ_НеЗаполненныйСотрудник.personal_uid = ВТ_МестаРаботы.СотрудникКод
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	otdel_name
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_БезШахты.personal_name КАК personal_name,
		|	ВТ_БезШахты.work_name КАК work_name,
		|	ВТ_БезШахты.org_name КАК org_name,
		|	ВТ_БезШахты.otdel_name КАК otdel_name,
		|	ВТ_БезШахты.personal_name1 КАК personal_name1,
		|	ВТ_БезШахты.work_name1 КАК work_name1,
		|	ВТ_БезШахты.org_name1 КАК org_name1,
		|	ВТ_БезШахты.otdel_name1 КАК otdel_name1,
		|	ВТ_БезШахты.personal_uid КАК personal_uid,
		|	ВТ_БезШахты.ИдентификаторСообщения КАК ИдентификаторСообщения,
		|	ВТ_БезШахты.quiz_session_id КАК quiz_session_id,
		|	ВТ_БезШахты.time КАК time,
		|	ВТ_БезШахты.section_name КАК section_name,
		|	ВТ_БезШахты.question_id КАК question_id,
		|	ВТ_БезШахты.question_text КАК question_text,
		|	ВТ_БезШахты.question_result КАК question_result,
		|	ВТ_БезШахты.question_result_text КАК question_result_text,
		|	ВТ_БезШахты.Шахта КАК Шахта,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ПодразделенияОрганизаций.Родитель.Родитель = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|				ТОГДА ПодразделенияОрганизаций.Ссылка
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ПодразделенияОрганизаций.Родитель.Родитель.Родитель = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|						ТОГДА ПодразделенияОрганизаций.Родитель.Ссылка
		|					ИНАЧЕ ВЫБОР
		|							КОГДА ПодразделенияОрганизаций.Родитель.Родитель.Родитель.Родитель = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|								ТОГДА ПодразделенияОрганизаций.Родитель.Родитель.Ссылка
		|							ИНАЧЕ ВЫБОР
		|									КОГДА ПодразделенияОрганизаций.Родитель.Родитель.Родитель.Родитель.Родитель = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|										ТОГДА ПодразделенияОрганизаций.Родитель.Родитель.Родитель.Ссылка
		|								КОНЕЦ
		|						КОНЕЦ
		|				КОНЕЦ
		|		КОНЕЦ, ВТ_БезШахты.Шахта) КАК Шахта1,
		|	ВТ_БезШахты.ДатаРегистрации КАК ДатаРегистрации
		|ИЗ
		|	ВТ_БезШахты КАК ВТ_БезШахты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|		ПО ВТ_БезШахты.otdel_name1 = ПодразделенияОрганизаций.Ссылка
		|ГДЕ
		|	ВТ_БезШахты.personal_name1 <> &personal_name"; 
	
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("personal_name", Справочники.Сотрудники.ПустаяСсылка());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ВыборкаДетальныеЗаписи.personal_name1 = Справочники.Сотрудники.ПустаяСсылка() Тогда
			Продолжить;
		КонецЕсли;	
		
		ЗаписьОчереди = РегистрыСведений.син_РезультатыПрохожденияПредсменногоЭкзаменатораЭСМО.СоздатьМенеджерЗаписи();
		ЗаписьОчереди.ИдентификаторСообщения = ВыборкаДетальныеЗаписи.ИдентификаторСообщения;
		ЗаписьОчереди.personal_name          = ВыборкаДетальныеЗаписи.personal_name;
		ЗаписьОчереди.org_name               = ВыборкаДетальныеЗаписи.org_name;
		ЗаписьОчереди.otdel_name             = ВыборкаДетальныеЗаписи.otdel_name;
		ЗаписьОчереди.work_name              = ВыборкаДетальныеЗаписи.work_name;
		ЗаписьОчереди.Шахта                  = ВыборкаДетальныеЗаписи.Шахта;
		ЗаписьОчереди.quiz_session_id        = ВыборкаДетальныеЗаписи.quiz_session_id;
		ЗаписьОчереди.question_id            = ВыборкаДетальныеЗаписи.question_id;
		ЗаписьОчереди.personal_uid           = ВыборкаДетальныеЗаписи.personal_uid;
		
		ЗаписьОчереди.Прочитать();
		Если ЗаписьОчереди.Выбран() Тогда
			
			ЗаписьОчереди.personal_name          = ВыборкаДетальныеЗаписи.personal_name1;
			ЗаписьОчереди.org_name               = ВыборкаДетальныеЗаписи.org_name1;
			ЗаписьОчереди.otdel_name             = ВыборкаДетальныеЗаписи.otdel_name1;
			ЗаписьОчереди.work_name              = ВыборкаДетальныеЗаписи.work_name1;
			ЗаписьОчереди.Шахта                  = ВыборкаДетальныеЗаписи.Шахта1;
		
			ЗаписьОчереди.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА


КонецПроцедуры

&НаКлиенте
Процедура ДозаполнитьСотрудниковВРегистре(Команда)
	ДозаполнитьСотрудниковВРегистреНаСервере();  
	ОбщегоНазначенияКлиент.СообщитьПользователю("Готово");
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьШахтуНаСервере()
	
	Выборка = РегистрыСведений.син_РезультатыПрохожденияПредсменногоЭкзаменатораЭСМО.Выбрать();
	
	//Сч = 0;
	
	Пока Выборка.Следующий() Цикл
		
		//Сч = Сч + 1;
		
		//Если Сч >= 100 Тогда 
		//	Прервать;
		//КонецЕсли;	
		
		ЗаписьОчереди = РегистрыСведений.син_РезультатыПрохожденияПредсменногоЭкзаменатораЭСМО.СоздатьМенеджерЗаписи();
		ЗаписьОчереди.ИдентификаторСообщения = Выборка.ИдентификаторСообщения;
		ЗаписьОчереди.personal_name          = Выборка.personal_name;
		ЗаписьОчереди.org_name               = Выборка.org_name;
		ЗаписьОчереди.otdel_name             = Выборка.otdel_name;
		ЗаписьОчереди.work_name              = Выборка.work_name;
		ЗаписьОчереди.Шахта                  = Выборка.Шахта;
		ЗаписьОчереди.quiz_session_id        = Выборка.quiz_session_id;
		ЗаписьОчереди.question_id            = Выборка.question_id;
		ЗаписьОчереди.personal_uid           = Выборка.personal_uid;
		
		ЗаписьОчереди.Прочитать();
		Если ЗаписьОчереди.Выбран() Тогда
			
			ЗаписьОчереди.Шахта = син_ОбщегоНазначения.ПодразделениеВерхнегоУровня(Выборка.otdel_name);
		
			ЗаписьОчереди.Записать();
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьШахту(Команда)
	ПерезаполнитьШахтуНаСервере(); 
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Готово";
	Сообщение.Сообщить();
КонецПроцедуры

//////////////////////////////////////////////////
//Запуск локально
Процедура син_ПолучитьРезультатыПрохожденияПредсменногоЭкзаменатораЭСМО() 
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаРезультатовКРазбору = ТаблицаДанныхРезультатовЭкзамена1();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 100
	|	энтр_ОчередьВходящихСообщений.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|	энтр_ОчередьВходящихСообщений.Сообщение КАК Сообщение,
	|	энтр_ОчередьВходящихСообщений.ДатаРегистрации КАК ДатаРегистрации
	|ИЗ
	|	РегистрСведений.энтр_ОчередьВходящихСообщений КАК энтр_ОчередьВходящихСообщений
	|ГДЕ
	|	энтр_ОчередьВходящихСообщений.Обработано = ЛОЖЬ
	|	И энтр_ОчередьВходящихСообщений.ФорматКонвертации = ЗНАЧЕНИЕ(Перечисление.энтр_ФорматыКонвертации.КонтрольЗнаний)";

	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ВыборкаДетальныеЗаписи.Сообщение);
		
		СодержимоеСообщения = ПрочитатьJSON(ЧтениеJSON);
		
		Для каждого ОтветНаВопрос Из СодержимоеСообщения Цикл
			
			СтрокаРезультатовКРазбору = ТаблицаРезультатовКРазбору.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаРезультатовКРазбору, ОтветНаВопрос); 
			СтрокаРезультатовКРазбору.question_result_text = ?(ОтветНаВопрос.question_result_text = "Правильно", Истина, Ложь);
			СтрокаРезультатовКРазбору.org_name_string = ОтветНаВопрос.org_name;
			СтрокаРезультатовКРазбору.personal_name_string = ОтветНаВопрос.personal_name;
			СтрокаРезультатовКРазбору.otdel_name_string = ОтветНаВопрос.otdel_name;
			СтрокаРезультатовКРазбору.work_name_string = ОтветНаВопрос.work_name; 
			СтрокаРезультатовКРазбору.ДатаРегистрации = ВыборкаДетальныеЗаписи.ДатаРегистрации;
			СтрокаРезультатовКРазбору.ИдентификаторСообщения = ВыборкаДетальныеЗаписи.ИдентификаторСообщения; 
			СтрокаРезультатовКРазбору.time = СтроковыеФункцииКлиентСервер.СтрокаВДату(ОтветНаВопрос.time);
			
		КонецЦикла;	
		
		энтр_ОчередьВходящихСообщенийПроставитьОтметкуОбработано1(ВыборкаДетальныеЗаписи.ИдентификаторСообщения);
		
	КонецЦикла;   
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаКДополнению.personal_uid КАК personal_uid,
	|	ТаблицаКДополнению.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|	ТаблицаКДополнению.quiz_session_id КАК quiz_session_id,
	|	ТаблицаКДополнению.time КАК time,
	|	ТаблицаКДополнению.section_name КАК section_name,
	|	ТаблицаКДополнению.question_id КАК question_id,
	|	ТаблицаКДополнению.question_text КАК question_text,
	|	ТаблицаКДополнению.question_result КАК question_result,
	|	ТаблицаКДополнению.question_result_text КАК question_result_text,
	|	ТаблицаКДополнению.personal_name КАК personal_name,
	|	ТаблицаКДополнению.org_name КАК org_name,
	|	ТаблицаКДополнению.otdel_name КАК otdel_name,
	|	ТаблицаКДополнению.work_name КАК work_name,
	|	ТаблицаКДополнению.Шахта КАК Шахта,
	|	ТаблицаКДополнению.ДатаРегистрации КАК ДатаРегистрации
	|ПОМЕСТИТЬ ВТ_РезультатыЭкзаменаБезСсылок
	|ИЗ
	|	&ТаблицаКДополнению КАК ТаблицаКДополнению
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	personal_uid
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Сотрудники.Ссылка, ЗНАЧЕНИЕ(Справочник.Сотрудники.)) КАК personal_name,
	|	ЕСТЬNULL(Сотрудники.Должность, ЗНАЧЕНИЕ(Справочник.Должности.)) КАК work_name,
	|	ЕСТЬNULL(Сотрудники.Организация, ЗНАЧЕНИЕ(Справочник.Организации.)) КАК org_name,
	|	ЕСТЬNULL(Сотрудники.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.)) КАК otdel_name,
	|	ВТ_РезультатыЭкзаменаБезСсылок.personal_uid КАК personal_uid,
	|	ВТ_РезультатыЭкзаменаБезСсылок.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|	ВТ_РезультатыЭкзаменаБезСсылок.quiz_session_id КАК quiz_session_id,
	|	ВТ_РезультатыЭкзаменаБезСсылок.time КАК time,
	|	ВТ_РезультатыЭкзаменаБезСсылок.section_name КАК section_name,
	|	ВТ_РезультатыЭкзаменаБезСсылок.question_id КАК question_id,
	|	ВТ_РезультатыЭкзаменаБезСсылок.question_text КАК question_text,
	|	ВТ_РезультатыЭкзаменаБезСсылок.question_result КАК question_result,
	|	ВТ_РезультатыЭкзаменаБезСсылок.question_result_text КАК question_result_text,
	|	ВТ_РезультатыЭкзаменаБезСсылок.Шахта КАК Шахта,
	|	ВТ_РезультатыЭкзаменаБезСсылок.ДатаРегистрации КАК ДатаРегистрации
	|ПОМЕСТИТЬ ВТ_БезТекущегоМестаРаботы
	|ИЗ
	|	ВТ_РезультатыЭкзаменаБезСсылок КАК ВТ_РезультатыЭкзаменаБезСсылок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО ВТ_РезультатыЭкзаменаБезСсылок.personal_uid = Сотрудники.Код
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	personal_name,
	|	org_name
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КадроваяИсторияСотрудников_ТекущееСостояние.Сотрудник КАК Сотрудник,
	|	КадроваяИсторияСотрудников_ТекущееСостояние.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ИспользоватьШтатноеРасписание.Значение
	|			ТОГДА КадроваяИсторияСотрудников_ТекущееСостояние.ДолжностьПоШтатномуРасписанию.ДолжностьПрофессия
	|		ИНАЧЕ КадроваяИсторияСотрудников_ТекущееСостояние.ДолжностьПрофессия
	|	КОНЕЦ КАК Должность,
	|	КадроваяИсторияСотрудников_ТекущееСостояние.Подразделение КАК Подразделение
	|ПОМЕСТИТЬ ВТ_МестаРаботы
	|ИЗ
	|	РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних(
	|			&Дата,
	|			(Сотрудник, Организация) В
	|				(ВЫБРАТЬ
	|					ВТ_БезТекущегоМестаРаботы.personal_name,
	|					ВТ_БезТекущегоМестаРаботы.org_name
	|				ИЗ
	|					ВТ_БезТекущегоМестаРаботы КАК ВТ_БезТекущегоМестаРаботы)) КАК КадроваяИсторияСотрудников_ТекущееСостояние
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних(&Дата, Статус = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботника.Принят)) КАК КадроваяИсторияСотрудников_ПринятНаРаботу
	|		ПО КадроваяИсторияСотрудников_ТекущееСостояние.Сотрудник = КадроваяИсторияСотрудников_ПринятНаРаботу.Сотрудник
	|			И КадроваяИсторияСотрудников_ТекущееСостояние.Организация = КадроваяИсторияСотрудников_ПринятНаРаботу.Организация,
	|	Константа.ИспользоватьШтатноеРасписание КАК ИспользоватьШтатноеРасписание
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВТ_МестаРаботы.Сотрудник, ВТ_БезТекущегоМестаРаботы.personal_name) КАК personal_name,
	|	ЕСТЬNULL(ВТ_МестаРаботы.Должность, ВТ_БезТекущегоМестаРаботы.work_name) КАК work_name,
	|	ЕСТЬNULL(ВТ_МестаРаботы.Организация, ВТ_БезТекущегоМестаРаботы.org_name) КАК org_name,
	|	ЕСТЬNULL(ВТ_МестаРаботы.Подразделение, ВТ_БезТекущегоМестаРаботы.otdel_name) КАК otdel_name,
	|	ВТ_БезТекущегоМестаРаботы.personal_uid КАК personal_uid,
	|	ВТ_БезТекущегоМестаРаботы.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|	ВТ_БезТекущегоМестаРаботы.quiz_session_id КАК quiz_session_id,
	|	ВТ_БезТекущегоМестаРаботы.time КАК time,
	|	ВТ_БезТекущегоМестаРаботы.section_name КАК section_name,
	|	ВТ_БезТекущегоМестаРаботы.question_id КАК question_id,
	|	ВТ_БезТекущегоМестаРаботы.question_text КАК question_text,
	|	ВТ_БезТекущегоМестаРаботы.question_result КАК question_result,
	|	ВТ_БезТекущегоМестаРаботы.question_result_text КАК question_result_text,
	|	ВТ_БезТекущегоМестаРаботы.Шахта КАК Шахта,
	|	ВТ_БезТекущегоМестаРаботы.ДатаРегистрации КАК ДатаРегистрации
	|ПОМЕСТИТЬ ВТ_БезШахты
	|ИЗ
	|	ВТ_БезТекущегоМестаРаботы КАК ВТ_БезТекущегоМестаРаботы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МестаРаботы КАК ВТ_МестаРаботы
	|		ПО ВТ_БезТекущегоМестаРаботы.personal_name = ВТ_МестаРаботы.Сотрудник
	|			И ВТ_БезТекущегоМестаРаботы.org_name = ВТ_МестаРаботы.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	otdel_name
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_БезШахты.personal_name КАК personal_name,
	|	ВТ_БезШахты.work_name КАК work_name,
	|	ВТ_БезШахты.org_name КАК org_name,
	|	ВТ_БезШахты.otdel_name КАК otdel_name,
	|	ВТ_БезШахты.personal_uid КАК personal_uid,
	|	ВТ_БезШахты.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|	ВТ_БезШахты.quiz_session_id КАК quiz_session_id,
	|	ВТ_БезШахты.time КАК time,
	|	ВТ_БезШахты.section_name КАК section_name,
	|	ВТ_БезШахты.question_id КАК question_id,
	|	ВТ_БезШахты.question_text КАК question_text,
	|	ВТ_БезШахты.question_result КАК question_result,
	|	ВТ_БезШахты.question_result_text КАК question_result_text,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ПодразделенияОрганизаций.Родитель = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|				ТОГДА ПодразделенияОрганизаций.Ссылка
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ПодразделенияОрганизаций.Родитель.Родитель = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|						ТОГДА ПодразделенияОрганизаций.Родитель.Ссылка
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ПодразделенияОрганизаций.Родитель.Родитель.Родитель = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|								ТОГДА ПодразделенияОрганизаций.Родитель.Родитель.Ссылка
	|							ИНАЧЕ ВЫБОР
	|									КОГДА ПодразделенияОрганизаций.Родитель.Родитель.Родитель.Родитель = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|										ТОГДА ПодразделенияОрганизаций.Родитель.Родитель.Родитель.Ссылка
	|									ИНАЧЕ ВЫБОР
	|											КОГДА ПодразделенияОрганизаций.Родитель.Родитель.Родитель.Родитель.Родитель = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|												ТОГДА ПодразделенияОрганизаций.Родитель.Родитель.Родитель.Родитель.Ссылка
	|											ИНАЧЕ ВЫБОР
	|													КОГДА ПодразделенияОрганизаций.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|														ТОГДА ПодразделенияОрганизаций.Родитель.Родитель.Родитель.Родитель.Родитель.Ссылка
	|												КОНЕЦ
	|										КОНЕЦ
	|								КОНЕЦ
	|						КОНЕЦ
	|				КОНЕЦ
	|		КОНЕЦ, ВТ_БезШахты.Шахта) КАК Шахта,
	|	ВТ_БезШахты.ДатаРегистрации КАК ДатаРегистрации
	|ИЗ
	|	ВТ_БезШахты КАК ВТ_БезШахты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|		ПО ВТ_БезШахты.otdel_name = ПодразделенияОрганизаций.Ссылка"; 
	
	Запрос.УстановитьПараметр("ТаблицаКДополнению", ТаблицаРезультатовКРазбору);
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ЗаписьРезультатовЭкзамена1(ВыборкаДетальныеЗаписи);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ЗаписьРезультатовЭкзамена1(ВыборкаДанныхКЗаписи)

	Пока ВыборкаДанныхКЗаписи.Следующий() Цикл

		Попытка
			
			НоваяЗапись = РегистрыСведений.син_РезультатыПрохожденияПредсменногоЭкзаменатораЭСМО.СоздатьМенеджерЗаписи();
			
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДанныхКЗаписи); 

			НоваяЗапись.Записать();
			
		Исключение 
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
		
			ЗаписьЖурналаРегистрации("Запись результатов прохождения предсменного экзамена.",
				УровеньЖурналаРегистрации.Ошибка,,, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
				
		КонецПопытки;
		
	КонецЦикла;

КонецПроцедуры   

Процедура энтр_ОчередьВходящихСообщенийПроставитьОтметкуОбработано1(ИдентификаторЗаписи)

	ЗаписьОчереди = РегистрыСведений.энтр_ОчередьВходящихСообщений.СоздатьМенеджерЗаписи();
	ЗаписьОчереди.ИдентификаторСообщения = ИдентификаторЗаписи;
	
	ЗаписьОчереди.Прочитать();
	Если ЗаписьОчереди.Выбран() Тогда
		
		ЗаписьОчереди.Обработано = Истина;
		ЗаписьОчереди.ТекстОшибки = "Обработано, перенесено в регистр ""син_РезультатыПрохожденияПредсменногоЭкзаменатораЭСМО"".";
		ЗаписьОчереди.Записать();
		
	КонецЕсли;

КонецПроцедуры

Функция ТаблицаДанныхРезультатовЭкзамена1()
	
	ТипБулево = Новый ОписаниеТипов("Булево");
	ТипСотрудник = Новый ОписаниеТипов("СправочникСсылка.Сотрудники");
	ТипОрганизация = Новый ОписаниеТипов("СправочникСсылка.Организации");
	ТипПодразделение = Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"); 
	ТипДолжность = Новый ОписаниеТипов("СправочникСсылка.Должности"); 
	Данные    = Новый ТаблицаЗначений;
	Колонки   = Данные.Колонки;

	Колонки.Добавить("ИдентификаторСообщения", Новый ОписаниеТипов("УникальныйИдентификатор"));
	Колонки.Добавить("quiz_session_id", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	Колонки.Добавить("time", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Колонки.Добавить("section_name", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	Колонки.Добавить("question_id", ОбщегоНазначения.ОписаниеТипаЧисло(5));
	Колонки.Добавить("question_text", ОбщегоНазначения.ОписаниеТипаСтрока(1024));
	Колонки.Добавить("question_result", ОбщегоНазначения.ОписаниеТипаЧисло(1));
	Колонки.Добавить("question_result_text", ТипБулево);
	Колонки.Добавить("personal_uid", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	Колонки.Добавить("personal_name", ТипСотрудник);
	Колонки.Добавить("personal_name_string", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	Колонки.Добавить("org_name", ТипОрганизация);
	Колонки.Добавить("org_name_string", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	Колонки.Добавить("otdel_name", ТипПодразделение);
	Колонки.Добавить("otdel_name_string", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	Колонки.Добавить("work_name", ТипДолжность);
	Колонки.Добавить("work_name_string", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	Колонки.Добавить("Шахта", ТипПодразделение);
	Колонки.Добавить("ДатаРегистрации", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	
	Возврат Данные

КонецФункции

&НаСервере
Процедура ЗапуститьЛокальноБезРегЗаданияНаСервере()

	син_ПолучитьРезультатыПрохожденияПредсменногоЭкзаменатораЭСМО();

КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьЛокальноБезРегЗадания(Команда)
	ЗапуститьЛокальноБезРегЗаданияНаСервере();
КонецПроцедуры
